// Responsive Breakpoint Mixins
// Mobile-first approach using min-width for progressive enhancement

// Mobile Portrait and up (320px+)
@mixin mobile-up {
  @media (min-width: $breakpoint-mobile-portrait) {
    @content;
  }
}

// Mobile Landscape and up (481px+)
@mixin mobile-landscape-up {
  @media (min-width: $breakpoint-mobile-landscape) {
    @content;
  }
}

// Tablet Portrait and up (601px+)
@mixin tablet-portrait-up {
  @media (min-width: $breakpoint-tablet-portrait) {
    @content;
  }
}

// Tablet Landscape and up (769px+)
@mixin tablet-landscape-up {
  @media (min-width: $breakpoint-tablet-landscape) {
    @content;
  }
}

// Small Desktop and up (1025px+)
@mixin small-desktop-up {
  @media (min-width: $breakpoint-small-desktop) {
    @content;
  }
}

// Large Desktop and up (1281px+)
@mixin large-desktop-up {
  @media (min-width: $breakpoint-large-desktop) {
    @content;
  }
}

// Extra Large Screens and up (1441px+)
@mixin extra-large-up {
  @media (min-width: $breakpoint-extra-large) {
    @content;
  }
}

// Range-specific mixins for targeting specific device ranges
@mixin mobile-only {
  @media (max-width: #{$breakpoint-mobile-landscape - 1px}) {
    @content;
  }
}

@mixin mobile-landscape-only {
  @media (min-width: $breakpoint-mobile-landscape) and (max-width: #{$breakpoint-tablet-portrait - 1px}) {
    @content;
  }
}

@mixin tablet-only {
  @media (min-width: $breakpoint-tablet-portrait) and (max-width: #{$breakpoint-small-desktop - 1px}) {
    @content;
  }
}

@mixin tablet-portrait-only {
  @media (min-width: $breakpoint-tablet-portrait) and (max-width: #{$breakpoint-tablet-landscape - 1px}) {
    @content;
  }
}

@mixin tablet-landscape-only {
  @media (min-width: $breakpoint-tablet-landscape) and (max-width: #{$breakpoint-small-desktop - 1px}) {
    @content;
  }
}

@mixin desktop-only {
  @media (min-width: $breakpoint-small-desktop) and (max-width: #{$breakpoint-extra-large - 1px}) {
    @content;
  }
}

// Custom breakpoint mixin for content-driven breakpoints
@mixin custom-breakpoint($min-width, $max-width: null) {
  @if $max-width {
    @media (min-width: $min-width) and (max-width: $max-width) {
      @content;
    }
  } @else {
    @media (min-width: $min-width) {
      @content;
    }
  }
}

// Container query mixins (for modern browsers supporting container queries)
@mixin container-width($width) {
  @container (min-width: $width) {
    @content;
  }
}

// Utility mixins for common responsive patterns
@mixin hide-on-mobile {
  @include mobile-only {
    display: none !important;
  }
}

@mixin hide-on-desktop {
  @include small-desktop-up {
    display: none !important;
  }
}

@mixin show-on-mobile-only {
  display: none;
  @include mobile-only {
    display: block;
  }
}

@mixin show-on-desktop-only {
  display: none;
  @include small-desktop-up {
    display: block;
  }
}
